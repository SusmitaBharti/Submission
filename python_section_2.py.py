{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP34R0BHQGSx3kF9oR8bbHl"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"c5BIlt-xxGAg"},"outputs":[],"source":["import pandas as pd\n","\n","def calculate_distance_matrix(file_path):\n","    df = pd.read_csv(file_path)\n","    # Create a matrix with all distances set to 0\n","    distance_matrix = pd.DataFrame(data=0, index=df['toll_location_id'], columns=df['toll_location_id'])\n","    # Fill the matrix with the distances from the CSV file\n","    for i in range(len(df)):\n","        distance_matrix.loc[df['toll_location_id'][i], df['next_toll_location_id'][i]] = df['distance'][i]\n","    # Make the matrix symmetric\n","    for i in range(len(df['toll_location_id'])):\n","        for j in range(i+1, len(df['toll_location_id'])):\n","            if distance_matrix.iloc[i, j] != 0:\n","                distance_matrix.iloc[j, i] = distance_matrix.iloc[i, j]\n","\n","    return distance_matrix\n","\n","\n","# Example usage\n","file_path = \"dataset-2.csv\"\n","distance_matrix = calculate_distance_matrix(file_path)\n","\n","print(distance_matrix)"]},{"cell_type":"code","source":["def find_ids_within_ten_percentage_threshold(df, threshold):\n","\n","\n","    # Calculate the mean distance\n","    mean_distance = df[\"distance\"].mean()\n","\n","    # Calculate the threshold distance\n","    threshold_distance = mean_distance * (threshold / 100)\n","\n","    # Filter the DataFrame to keep only the rows with distances within the threshold\n","    filtered_df = df[df[\"distance\"] <= threshold_distance]\n","\n","    return filtered_df"],"metadata":{"id":"n7JBuFVs1Xxe","executionInfo":{"status":"ok","timestamp":1729678069168,"user_tz":-330,"elapsed":610,"user":{"displayName":"Susmita","userId":"09438202502163888891"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import math\n","\n","def find_ids_within_ten_percentage_threshold(df, reference_value):\n","    average = df[\"id_start\"].mean()\n","\n","    # Calculate the 10% threshold above and below the average.\n","    threshold_upper = math.ceil(average + (0.10 * average))\n","    threshold_lower = math.floor(average - (0.10 * average))\n","\n","    # Filter the DataFrame to include values within the threshold.\n","    filtered_df = df[(df[\"id_start\"] >= threshold_lower) & (df[\"id_start\"] <= threshold_upper)]\n","\n","    # Extract the id_start values and sort them.\n","    ids = filtered_df[\"id_start\"].to_list()\n","    ids.sort()\n","\n","    return ids"],"metadata":{"id":"jKcKaFHa2Ppg","executionInfo":{"status":"ok","timestamp":1729678368794,"user_tz":-330,"elapsed":629,"user":{"displayName":"Susmita","userId":"09438202502163888891"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def calculate_toll_rate(df):\n","\n","    df['moto'] = df['distance'] * 0.8\n","    df['car'] = df['distance'] * 1.2\n","    df['rv'] = df['distance'] * 1.5\n","    df['bus'] = df['distance'] * 2.2\n","    df['truck'] = df['distance'] * 3.6\n","\n","    return df"],"metadata":{"id":"T85YYdUk4C62","executionInfo":{"status":"ok","timestamp":1729678565099,"user_tz":-330,"elapsed":927,"user":{"displayName":"Susmita","userId":"09438202502163888891"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","from datetime import time\n","\n","def calculate_time_based_toll_rates(df):\n","\n","    # Create a list of days of the week\n","    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n","\n","    # Create a list of time intervals and their corresponding discount factors\n","    time_intervals = [\n","        (time(0, 0, 0), time(10, 0, 0), 0.8),\n","        (time(10, 0, 0), time(18, 0, 0), 1.2),\n","        (time(18, 0, 0), time(23, 59, 59), 0.8),\n","    ]\n","\n","    # Create a new DataFrame to store the results\n","    result_df = pd.DataFrame(columns=['start_day', 'start_time', 'end_day', 'end_time'] + list(df.columns[3:]))\n","\n","    # Iterate over the unique (id_start, id_end) pairs in the DataFrame\n","    for id_start, id_end in df[['id_start', 'id_end']].drop_duplicates().values:\n","        # Iterate over the days of the week\n","        for day_idx, day in enumerate(days):\n","            # Iterate over the time intervals\n","            for start_time, end_time, discount_factor in time_intervals:\n","                # Calculate the adjusted toll rates\n","                adjusted_rates = df[(df['id_start'] == id_start) & (df['id_end'] == id_end)][df.columns[3:]].values[0] * discount_factor\n","\n","                # Add the row to the results DataFrame\n","                result_df = result_df.append(\n","                    {\n","                        'start_day': day,\n","                        'start_time': start_time,\n","                        'end_day': days[(day_idx + 1) % len(days)],\n","                        'end_time': end_time})"],"metadata":{"id":"X9Iyjxua4Gp8","executionInfo":{"status":"ok","timestamp":1729678990174,"user_tz":-330,"elapsed":9,"user":{"displayName":"Susmita","userId":"09438202502163888891"}}},"execution_count":7,"outputs":[]}]}